using System;
using System.Reflection;
using System.Runtime.CompilerServices;

namespace Yuumix.OdinToolkits.Modules.QoderTypeAnalyzer
{
    /// <summary>
    /// 成员自动生成检测工具类
    /// </summary>
    public static class MemberGenerationDetector
    {
        #region 公共方法
        
        /// <summary>
        /// 检测方法是否为自动生成的
        /// </summary>
        /// <param name="method">方法信息</param>
        /// <returns>是否为自动生成</returns>
        public static bool IsAutoGeneratedMethod(MethodInfo method)
        {
            if (method == null)
                return false;
                
            // 检查编译器生成特性
            if (method.IsDefined(typeof(CompilerGeneratedAttribute), false))
                return true;
                
            // 检查属性的 get/set 方法
            if (IsPropertyAccessor(method))
                return true;
                
            // 检查事件的 add/remove 方法
            if (IsEventAccessor(method))
                return true;
                
            // 注意：运算符重载方法和显式/隐式转换方法不过滤，应该显示出来
            // 这些是用户明确定义的方法，应该在类型分析中展示
                
            return false;
        }
        
        /// <summary>
        /// 检测构造函数是否为自动生成的
        /// </summary>
        /// <param name="constructor">构造函数信息</param>
        /// <returns>是否为自动生成</returns>
        public static bool IsAutoGeneratedMethod(ConstructorInfo constructor)
        {
            if (constructor == null)
                return false;
                
            // 检查编译器生成特性
            if (constructor.IsDefined(typeof(CompilerGeneratedAttribute), false))
                return true;
                
            return false;
        }
        
        /// <summary>
        /// 检测字段是否为自动生成的
        /// </summary>
        /// <param name="field">字段信息</param>
        /// <returns>是否为自动生成</returns>
        public static bool IsAutoGeneratedField(FieldInfo field)
        {
            if (field == null)
                return false;
                
            // 检查编译器生成特性
            if (field.IsDefined(typeof(CompilerGeneratedAttribute), false))
                return true;
                
            // 检查自动属性的备份字段
            if (IsAutoPropertyBackingField(field))
                return true;
                
            return false;
        }
        
        /// <summary>
        /// 检测属性是否为自动生成的
        /// </summary>
        /// <param name="property">属性信息</param>
        /// <returns>是否为自动生成</returns>
        public static bool IsAutoGeneratedProperty(PropertyInfo property)
        {
            if (property == null)
                return false;
                
            // 检查编译器生成特性
            if (property.IsDefined(typeof(CompilerGeneratedAttribute), false))
                return true;
                
            return false;
        }
        
        /// <summary>
        /// 检测事件是否为自动生成的
        /// </summary>
        /// <param name="eventInfo">事件信息</param>
        /// <returns>是否为自动生成</returns>
        public static bool IsAutoGeneratedEvent(EventInfo eventInfo)
        {
            if (eventInfo == null)
                return false;
                
            // 检查编译器生成特性
            if (eventInfo.IsDefined(typeof(CompilerGeneratedAttribute), false))
                return true;
                
            return false;
        }
        
        #endregion
        
        #region 特殊方法检测（公共方法）
        
        /// <summary>
        /// 检查是否为运算符方法（可用于分类或特殊处理）
        /// </summary>
        /// <param name="method">方法信息</param>
        /// <returns>是否为运算符方法</returns>
        public static bool IsOperatorMethod(MethodInfo method)
        {
            return method.IsSpecialName && method.Name.StartsWith("op_");
        }
        
        /// <summary>
        /// 检查是否为转换方法（显式或隐式转换，可用于分类或特殊处理）
        /// </summary>
        /// <param name="method">方法信息</param>
        /// <returns>是否为转换方法</returns>
        public static bool IsConversionMethod(MethodInfo method)
        {
            return method.IsSpecialName && 
                   (method.Name == "op_Implicit" || method.Name == "op_Explicit");
        }
        
        #endregion
        
        #region 私有方法
        
        /// <summary>
        /// 检查是否为属性访问器方法
        /// </summary>
        /// <param name="method">方法信息</param>
        /// <returns>是否为属性访问器</returns>
        private static bool IsPropertyAccessor(MethodInfo method)
        {
            return method.IsSpecialName && 
                   (method.Name.StartsWith("get_") || method.Name.StartsWith("set_"));
        }
        
        /// <summary>
        /// 检查是否为事件访问器方法
        /// </summary>
        /// <param name="method">方法信息</param>
        /// <returns>是否为事件访问器</returns>
        private static bool IsEventAccessor(MethodInfo method)
        {
            return method.IsSpecialName && 
                   (method.Name.StartsWith("add_") || method.Name.StartsWith("remove_"));
        }
        
        /// <summary>
        /// 检查是否为自动属性的备份字段
        /// </summary>
        /// <param name="field">字段信息</param>
        /// <returns>是否为自动属性备份字段</returns>
        private static bool IsAutoPropertyBackingField(FieldInfo field)
        {
            return field.Name.Contains("k__BackingField") || 
                   field.Name.Contains("__BackingField");
        }
        
        #endregion
    }
}